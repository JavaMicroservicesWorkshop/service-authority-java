openapi: 3.0.3
info:
  title: Authority Service
  description: |-
    Service which manages authority grants on the Customer actions. Also exposes Customers API
  version: 1.0.11
tags:
  - name: customers
    description: Customers API
  - name: login
    description: Login API
paths:
  /api/v1/login:
    post:
      tags:
        - login
      summary:  Login and generate JWT token
      description: Login and generate JWT token
      operationId: loginCustomer
      requestBody:
        description: Provide user credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
        required: true
      responses:
        '201':
          description: Registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterCustomerResponse'
        '400':
          description: Bad registration request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDto'
  /api/v1/customers:
    get:
      tags:
        - customers
      summary: Get paginated list of customers
      description: Get all customers
      operationId: getAllCustomers
      parameters:
        - name: page
          in: query
          description: desired page index
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          description: desired page size
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns paginated list of Customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCustomerDto'
    post:
      tags:
        - customers
      summary: Register new customer
      description: Register new customer
      operationId: registerCustomer
      requestBody:
        description: Register new customer in the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCustomerRequest'
        required: true
      responses:
        '201':
          description: Registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterCustomerResponse'
        '400':
          description: Bad registration request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDto'
  /api/v1/customers/{customerId}:
    get:
      tags:
        - customers
      summary: Get customer by id
      description: Get customer by id
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          description: ID of customer to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
        '404':
          description: Customer not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
    put:
      tags:
        - customers
      summary: Update customer by id
      description: Update customer by id
      operationId: updateCustomer
      parameters:
        - name: customerId
          in: path
          description: ID of customer to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update existing customer in the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCustomerRequest'
        required: true
      responses:
        '201':
          description: Updated sucefully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
        '400':
          description: Bad update request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDto'
        '404':
          description: Customer not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
    patch:
      tags:
        - customers
      summary: Change password of the customer
      description: Change password of the customer
      operationId: changeCustomerPassword
      parameters:
        - name: customerId
          in: path
          description: ID of customer to change password
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Change existing customer password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeCustomerPasswordRequest'
        required: true
      responses:
        '200':
          description: Updated sucefully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordDto'
        '404':
          description: Customer not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
    delete:
      tags:
        - customers
      summary: Delete existing customer
      description: Delete existing customer
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          description: ID of customer to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deleted successfully
        '404':
          description: Customer not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
components:
  schemas:
    InvalidPasswordDto:
      type: object
      properties:
        error:
          type: string
          example: Not Found
        errorMessage:
          type: string
          example: Can't change password because provided password does not match with User's password
    NotFoundDto:
      type: object
      properties:
        error:
          type: string
          example: Not Found
        errorMessage:
          type: string
          example: Customer with id 5de8b415-80a0-4e35-afbb-90467724d835 not found
    BadRequestDto:
      type: object
      properties:
        error:
          type: string
          example: Bad request
        errorMessages:
          type: array
          items:
            type: object
          example: ["lastName : must not be blank"]
    LoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: john.doe@gmail.com
        password:
          type: string
          example: john123
    CustomerDto:
      type: object
      properties:
        id:
          type: string
          example: 5de8b415-80a0-4e35-afbb-90467724d835
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john-doe@gmail.com
        phoneNumber:
          type: string
          example: 380930987600
    PaginatedCustomerDto:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CustomerDto'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 10
    ChangeCustomerPasswordRequest:
      required:
        - oldPassword
        - newPassword
      type: object
      properties:
        oldPassword:
          type: string
          example: oldString
        newPassword:
          type: string
          example: newString
    RegisterCustomerRequest:
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john-doe@gmail.com
        password:
          type: string
          example: password
        phoneNumber:
          type: string
          example: 380930987600
    RegisterCustomerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 5de8b415-80a0-4e35-afbb-90467724d835