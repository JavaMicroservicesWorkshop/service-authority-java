openapi: 3.0.3
info:
  title: Authority Service
  description: |-
    Service which manages authority grants on the User actions. Also exposes Users API
  version: 1.0.11
tags:
  - name: users
    description: Users API
  - name: login
    description: Login API
paths:
  /api/v1/login:
    post:
      tags:
        - login
      summary:  Login and generate JWT token
      description: Login and generate JWT token
      operationId: loginUser
      requestBody:
        description: Provide user credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
        required: true
      responses:
        '200':
          description: Authorized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtTokenDto'
        '401':
          description: Unauthorized
  /api/v1/users:
    get:
      tags:
        - users
      summary: Get paginated list of users
      description: Get all users
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          description: desired page index
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          description: desired page size
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns paginated list of Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserDto'
    post:
      tags:
        - users
      summary: Register new user
      description: Register new user
      operationId: registerUser
      requestBody:
        description: Register new user in the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
        required: true
      responses:
        '201':
          description: Registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDto'
  /api/v1/users/{userId}:
    get:
      tags:
        - users
      summary: Get user by id
      description: Get user by id
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
    put:
      tags:
        - users
      summary: Update user by id
      description: Update user by id
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update existing user in the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        '200':
          description: Updated sucefully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDto'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
    patch:
      tags:
        - users
      summary: Change password of the user
      description: Change password of the user
      operationId: changeUserPassword
      parameters:
        - name: userId
          in: path
          description: ID of user to change password
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Change existing user password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserPasswordRequest'
        required: true
      responses:
        '200':
          description: Updated sucefully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordDto'
        '404':
          description: User not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
    delete:
      tags:
        - users
      summary: Delete existing user
      description: Delete existing user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deleted successfully
        '404':
          description: User not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
components:
  schemas:
    InvalidPasswordDto:
      type: object
      properties:
        error:
          type: string
          example: Not Found
        errorMessage:
          type: string
          example: Can't change password because provided password does not match with User's password
    NotFoundDto:
      type: object
      properties:
        error:
          type: string
          example: Not Found
        errorMessage:
          type: string
          example: User with id 5de8b415-80a0-4e35-afbb-90467724d835 not found
    BadRequestDto:
      type: object
      properties:
        error:
          type: string
          example: Bad request
        errorMessages:
          type: array
          items:
            type: object
          example: ["lastName : must not be blank"]
    LoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: john.doe@gmail.com
        password:
          type: string
          example: john123
    JwtTokenDto:
      type: object
      properties:
        token:
          type: string
          example: 2df5278e-f2b3-4fe6-b722-9e2287a47330
    UserDto:
      type: object
      properties:
        id:
          type: string
          example: 5de8b415-80a0-4e35-afbb-90467724d835
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john-doe@gmail.com
        phoneNumber:
          type: string
          example: 380930987600
    PaginatedUserDto:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 10
    ChangeUserPasswordRequest:
      required:
        - oldPassword
        - newPassword
      type: object
      properties:
        oldPassword:
          type: string
          example: oldString
        newPassword:
          type: string
          example: newString
    UpdateUserRequest:
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john-doe@gmail.com
        phoneNumber:
          type: string
          example: 380930987600
    RegisterUserRequest:
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john-doe@gmail.com
        password:
          type: string
          example: password
        phoneNumber:
          type: string
          example: 380930987600
    RegisterUserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 5de8b415-80a0-4e35-afbb-90467724d835